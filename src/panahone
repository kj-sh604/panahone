#!/usr/bin/env python3

import argparse
import gi
import requests
import signal
import warnings
# import sys
# import json

# will fix this when it breaks :D
warnings.filterwarnings(
    "ignore",
    category=DeprecationWarning,
    message="Gtk.StatusIcon.*",
)

gi.require_version("Gtk", "3.0")
gi.require_version("Notify", "0.7")
from gi.repository import Gtk, Notify


class PanahoneApplet:
    def __init__(self, location, use_fahrenheit):
        self.location = location or ""
        self.use_fahrenheit = use_fahrenheit
        Notify.init("Panahone")
        self.icon = Gtk.StatusIcon()
        self.icon.set_from_icon_name('weather-overcast')
        self.icon.set_tooltip_text("Panahone: click to get weather")
        self.icon.connect("button-press-event", self.on_click)
        signal.signal(signal.SIGINT, self.quit)

    def on_click(self, icon, event):
        if event.button == 1:
            Notify.Notification.new(
                "Panahone",
                "Retrieving Weather Data…",
                "weather-overcast"
            ).show()
            self.fetch_and_notify()
        elif event.button == 2:
            self.quit()

    def fetch_and_notify(self):
        if not self.location:
            url = "https://wttr.in/?format=j1"
        else:
            url = f"https://wttr.in/{self.location}?format=j1"
        try:
            r = requests.get(url, timeout=10)
            data = r.json()
            current = data["current_condition"][0]
            location = data["nearest_area"][0]["areaName"][0]["value"]
            temp_c = current["temp_C"]
            temp_f = current["temp_F"]
            unit = "°F" if self.use_fahrenheit else "°C"
            temp = temp_f if self.use_fahrenheit else temp_c
            weather = current["weatherDesc"][0]["value"]
            message = f"Weather in {location}: {weather}, Temp: {temp}{unit}"
        except Exception as e:
            if not self.location:
                message = f"Error fetching weather: {e}"
            else:
                message = f"Error fetching weather for {self.location}: {e}"

        Notify.Notification.new(
            "Panahone",
            message,
            "weather-overcast"
        ).show()

    def quit(self, *args):
        Gtk.main_quit()

    def run(self):
        Gtk.main()


def parse_args():
    p = argparse.ArgumentParser(prog="panahone")
    p.add_argument("-l", "--location", help="location for weather")
    p.add_argument("-f", "--fahrenheit", action="store_true",
                   help="use Fahrenheit instead of Celsius")
    return p.parse_args()


def main():
    args = parse_args()
    app = PanahoneApplet(args.location, args.fahrenheit)
    try:
        app.run()
    except KeyboardInterrupt:
        app.quit()


if __name__ == "__main__":
    main()
